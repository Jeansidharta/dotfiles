use serde::Serialize;
use std::collections::HashSet;
use std::env::args;
use std::process::Command;

#[derive(Debug, Serialize)]
struct NetworkItem {
    bssid: String,
    ssid: String,
    network_type: String,
    channel: String,
    speed: String,
    bars: String,
    security: String,
    is_selected: bool,
    signal_strength: String,
}

fn list(refresh: bool) {
    let nmcli = String::from_utf8(
        Command::new("nmcli")
            .args([
                "-t",
                "device",
                "wifi",
                "list",
                "--rescan",
                if refresh { "yes" } else { "no" },
            ])
            .output()
            .unwrap()
            .stdout,
    )
    .unwrap();

    let hasmap = std::collections::hash_set::HashSet::<HashSet<String>>::new();
    let items: Vec<NetworkItem> = nmcli
        .lines()
        .map(|line| {
            let is_selected = line.starts_with('*');
            let bssid = line[2..24].to_string();
            let line = &line[25..];
            let mut items = line.split(':');
            let ssid = items.next().unwrap().to_string();
            let network_type = items.next().unwrap().to_string();
            let channel = items.next().unwrap().to_string();
            let speed = items.next().unwrap().to_string();
            let signal_strength = items.next().unwrap().to_string();
            let bars = items.next().unwrap().to_string();
            let security = items.next().unwrap_or("").to_string();

            NetworkItem {
                bssid,
                ssid,
                network_type,
                channel,
                speed,
                bars,
                security,
                is_selected,
                signal_strength,
            }
        })
            .filter(|item|)
        .collect();

    println!("{}", serde_json::to_string(&items).unwrap());
}

fn connect(ssid: &str, pass: &str) -> bool {
    Command::new("nmcli")
        .args(["device", "wifi", "connect", ssid, "password", pass])
        .output()
        .unwrap()
        .status
        .success()
}

fn main() {
    let mut args = args();
    args.next();
    let command = args.next().unwrap_or(String::from("list"));

    match &command[..] {
        "list" => list(args.next().is_some_and(|v| v == "refresh")),
        "connect" => println!(
            "{}",
            connect(&args.next().unwrap()[..], &args.next().unwrap()[..])
        ),
        _ => panic!("Invalid command"),
    }
}
